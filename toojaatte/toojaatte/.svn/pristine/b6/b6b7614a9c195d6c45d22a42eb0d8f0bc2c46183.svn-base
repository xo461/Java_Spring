package com.toojaatte.stock.controller;

import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.lang.ProcessBuilder.Redirect;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.core.io.ClassPathResource;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.toojaatte.stock.dto.StockKRXDTO;
import com.toojaatte.stock.service.StockService;

@Controller
@RequestMapping("/stock")
public class StockRestController {

	@Autowired
	@Qualifier("ss")
	private StockService service;

	@GetMapping("/test")
	public String getGraph(@RequestParam String code, @RequestParam String term) throws Exception {

		ClassPathResource resource = new ClassPathResource("com/toojaatte/stock/python/getGraphData.py");
		Path path = Paths.get(resource.getURI());
		String pathDir = path.toString().substring(0, path.getParent().toString().length());
		String[] command = new String[] {"python", path.toString(), code, term, pathDir};
		runProcessBuilder(command);
		return null;
	}

	public void runProcessBuilder(String[] command) throws IOException, InterruptedException {
		ProcessBuilder builder = new ProcessBuilder(command);
		builder.redirectOutput(Redirect.PIPE);
		builder.redirectError(Redirect.INHERIT);
		builder.start();
		
		Process process = builder.start();

		printStream(process);
	}

	private void printStream(Process process) throws IOException, InterruptedException {
		process.waitFor();
		try (InputStream psout = process.getInputStream()) {
			copy(psout, System.out);
		}
	}

	public void copy(InputStream input, OutputStream output) throws IOException {
		byte[] buffer = new byte[1024];
		int n = 0;
		while ((n = input.read(buffer)) != -1) {
			// 출력 결과를 확인하고 싶으면 이 주석 해제
//			output.write(buffer, 0, n);

		}
	}

}
