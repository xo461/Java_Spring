<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
    PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
    "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<!-- 리스트 -->
<!-- 중복을 배제하기 위해 namespace설정한다. 그렇지않으면 프로그램돌때 TimeMapper이름이중복되면 충돌이 일어날 수있다. -->
<mapper namespace="org.zerock.board.mapper.BoardMapper">
	<!-- TimeMapper.java 인터페이스의 메서드와 같은 이름을 id로 써야 인식된다. 리턴타입은 스트링으로 맞춰준다. 그럼자바에서 
		스트링으로 쓴다. 태그안에 sql문장을 쓴다. 참고로 dual은 오라클에서 기본 제공되는 테이블로 간단한 테스트를 할때 사용할수있다. -->
	<!-- 쿼리문: 정렬해서가져오고 - 글번호 붙이고 - 1부터 10까지 가져온다. -->
	<!-- resultType: 리스트, 글보기에서 select쿼리로 가져온 결과를 Java의 어떤 타입으로 변환하여 반환할지 지정 -->
	<select id="list" resultType="org.zerock.board.dto.BoardDTO">
		select * from (
		select rownum rnum,
		no, title, writer, writeDate, hit
		from (
		select no, title, writer,
		writeDate, hit
		from board2
		<!-- word 프로퍼티가 null이나 ""가 아니면 검색을 한다. -->
		<!-- mybatis에서 문자열이나 문자 데이터는 "'" 사용하는데 글자가 하나인 경우 char로 취급 -> .toString()함수를 
			통해 문자열로 바꿔줘야함. -->
		<!-- 동적쿼리if. if 문자열이 들어오는 경우에만 안에 쿼리 넣는다.include -->
		<if test="word != null and word != ''.toString()">
			where (1=0
			<include refid="searchCondition" />
			)
		</if>
		order by no desc)
		)
		where rnum between #{startRow} and #{endRow}
	</select>

	<!-- 데이터총개수 가져오기: 검색어로 필터링되면 된대로 개수 가져오기 -->
	<select id="getTotalRow" resultType="java.lang.Integer">
		select count(*) from board2
		<if test="word != null and word != ''.toString()">
			where (1=0
			<include refid="searchCondition" />
			)
		</if>
	</select>

	<!-- 검색에 필요한 조건 -->
	<!-- sql태그: 다른 태그에 삽입해서 재사용(include태그) -->
	<sql id="searchCondition">
		<!-- mybatis에서 문자열이나 문자 데이터는 "'" 사용하는데 글자가 하나인 경우 char로 취급 -> .toString()함수를 
			통해 문자열로 바꿔줘야함. -->
		<!-- %word% 앞뒤에 무슨 내용이 오든 안에 word가 있으면. -->
		<!-- 동적쿼리. t가 있으면 안에 쿼리 적용 -->
		<if test="key.toString().indexOf('t')>=0">
			or title like '%' || #{word} || '%'
		</if>
		<if test="key.toString().indexOf('c')>=0">
			or content like '%' || #{word} || '%'
		</if>
		<if test="key.toString().indexOf('w')>=0">
			or writer like '%' || #{word} || '%'
		</if>
	</sql>

	<!-- 글쓰기 -->
	<insert id="write" parameterType="org.zerock.board.dto.BoardDTO">
		<!-- 여기에 글번호가 먼저 생성되어야 boardfile에서 받아서 삽입가능하다. -->
		<selectKey keyProperty="no" resultType="int" order="BEFORE">
			SELECT
			BOARD2_SEQ.NEXTVAL FROM DUAL
		</selectKey>
		insert into board2(no, title,
		content, writer)
		values(#{no}, #{title},
		#{content},
		#{writer})
	</insert>

	<!-- 글쓰기에서 FileUpload -->
	<insert id="insertFile" parameterType="java.util.HashMap">
		insert into boardFile
		(file_no, NO, ORG_FILE_NAME, STORED_FILE_NAME,
		FILE_SIZE)
		values(boardFile_seq.nextval, #{NO}, #{ORG_FILE_NAME},
		#{STORED_FILE_NAME}, #{FILE_SIZE})
	</insert>

	<!-- 글보기 -->
	<select id="view" resultType="org.zerock.board.dto.BoardDTO">
		select no, title, content, writer,
		writeDate , hit
		from board2 where no = #{no}
	</select>

	<!-- 글보기에서 첨부파일 리스트 보여주기 -->
	<select id="selectFiles" resultType="java.util.HashMap">
		select file_no, NO,
		ORG_FILE_NAME, STORED_FILE_NAME, ROUND(FILE_SIZE/1024, 1) AS FILE_SIZE
		from boardFile
		where NO=#{no} and DEL_GB='N'
	</select>

	<!-- 글보기에서 파일 다운로드 위해 1개 정보 가져오기 -->
	<select id="selectAFile"
		resultType="org.zerock.board.dto.BoardFileDTO">
		select file_no, NO, ORG_FILE_NAME, STORED_FILE_NAME,
		FILE_SIZE
		from boardFile
		where file_no=#{file_no}
	</select>

	<!-- 글수정 -->
	<update id="update">
		update board2
		set title = #{title}, content =
		#{content}, writer = #{writer}
		where no = #{no}
	</update>

	<!-- 글삭제 -->
	<delete id="delete">
		delete from board2
		where no = #{no}
	</delete>



</mapper>