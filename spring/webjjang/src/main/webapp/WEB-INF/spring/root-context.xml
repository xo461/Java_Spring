<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:mybatis-spring="http://mybatis.org/schema/mybatis-spring"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xsi:schemaLocation="http://mybatis.org/schema/mybatis-spring http://mybatis.org/schema/mybatis-spring-1.2.xsd
		http://www.springframework.org/schema/beans https://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.3.xsd
		http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.3.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.3.xsd">

	<!-- Root Context: defines shared resources visible to all other web components -->
	<context:component-scan
		base-package="com.webjjang">
	</context:component-scan>

	<!-- 여기에 등록하면 서버 시작할때 돈다. 히카리라이브러리 여기에 등록하면 서버 시작할때 여러개의 커넥션을 만들어서 dbcp(커넥션풀)에 
		넣어준다. -->
	<!-- bean태그 만들면 자동생성이 된다. -->
	<!-- pom.xml에 hikari다운받았으므로 class에 입력한다. -->
	<bean id="hikariConfig" class="com.zaxxer.hikari.HikariConfig">
		<!-- log4j2사용을 위해 기존꺼 주석처리 -->
		<!-- <property name="driverClassName" value="oracle.jdbc.driver.OracleDriver"></property> -->
		<!-- <property name="jdbcUrl" value="jdbc:oracle:thin:@402-oracle:1521:orcl"></property> -->

		<!-- log4j2사용을 위해 아래와 같이 수정 -->
		<property name="driverClassName"
			value="net.sf.log4jdbc.sql.jdbcapi.DriverSpy"></property>
		<property name="jdbcUrl"
			value="jdbc:log4jdbc:oracle:thin:@402-oracle:1521:orcl"></property>
		<property name="username" value="c##java14"></property>
		<property name="password" value="java14"></property>

<!-- 		<property name="jdbcUrl"
			value="jdbc:log4jdbc:oracle:thin:@localhost:1521:xe"></property>
		<property name="username" value="java14"></property>
		<property name="password" value="java14"></property> -->


	</bean>
	<bean id="dataSource" class="com.zaxxer.hikari.HikariDataSource"
		destroy-method="close">
		<constructor-arg ref="hikariConfig" /> <!-- 생성자에의해서 파라메터로 hikariConfig받아온다. -->
	</bean>
	<!-- Mybatis연동 dao코드 자동생성 factorybean. bean을생성하는 공장. .hikari를 여기에 넣어준다. -->
	<!-- mapper Interface(메서드이름) - mapper xml(sql) -->
	<bean id="sqlSessionFactory"
		class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="dataSource" ref="dataSource" />
	</bean>

	<!-- namespace에 tx, aop 체크해야함. -->
	<!-- transaxtion이 aop프로그램이기때문에 aop도 함께 선언해야 한다. -->
	<!-- class나 method위에 @Transactional을 붙이기만 하면 그 안에 있는 것을 트랜젝션 처리를 한다. -->
	<tx:annotation-driven/>
	<aop:aspectj-autoproxy></aop:aspectj-autoproxy>
	
	<!-- 프로젝트 운영을 하는 상위 패키지로 변경해서 사용한다. -->
	<!-- dao(persistence). mybatis 관련 annotation을 scan해서 mybatis가 mapper를 인식하도록 
		연결해줌. -->
	<mybatis-spring:scan base-package="com.webjjang" />
	<context:component-scan
		base-package="com.webjjang">
	</context:component-scan>
	
</beans>