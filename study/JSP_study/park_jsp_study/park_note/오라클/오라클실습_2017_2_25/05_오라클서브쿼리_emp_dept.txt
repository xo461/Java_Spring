

http://junihuni.tistory.com/entry/%EC%98%A4%EB%9D%BC%ED%81%B4-%EC%84%9C%EB%B8%8C%EC%BF%BC%EB%A6%AC


♣ 다중행 서브쿼리

in            : 메인 쿼리의 비교 조건이 서브쿼리의 결과중에서 하나라도 일치하면참,   = 비교만 가능
any,some : 메인쿼리의 비교조건이 서브쿼리의 결과중에서 하나 이상 일치하면 참,  =,<.> 가능
all           : 메인쿼리의 비교조건이 서브쿼리의 결과중에서 모든값이 일치하면참
exists       : 메인쿼리의 비교조건이 서브쿼리의 결과중에서 만족하는 값이 하나라도 존재하면 참

 

♣ in 연산자
SQL> select * from 테이블이름 where 컬럼 in (select 컬럼 from 테이블이름 where 컬럼 = 값);
 

♣ any 연산자 (in의 확장) =일경우 in과 동일
SQL> select * from 테이블이름 where 컬럼 > any (select 컬럼 from 테이블이름 where 컬럼 = '값');

### 실습

● 예제  ( 인라인뷰)
SELECT *
FROM (SELECT * FROM dept);  

●예제
SELECT *
FROM dept A 
WHERE deptno=(SELECT deptno FROM emp WHERE empno=7566);  (subquery 방법 )

●예제
SELECT *
FROM dept A
WHERE deptno IN(SELECT deptno FROM emp);  (subquery IN 방법 )

♣ in   : 메인 쿼리의 비교 조건이 서브쿼리의 결과중에서 하나라도 일치하면참, (= 비교만 가능)

●예제
SELECT *
FROM dept A 
WHERE EXISTS (SELECT 1 FROM emp B WHERE B.deptno=A.deptno);  (subquery Exists 방법)

♣ exists       : 메인쿼리의 비교조건이 서브쿼리의 결과중에서 만족하는 값이 하나라도 존재하면 참

●예제  ( scalar subquery 방법 )
SELECT deptno,(SELECT deptno
                       FROM dept B
                       WHERE B.deptno = A.deptno) AS deptnm 
FROM emp A;   


JOIN 문 대신 이런 서브쿼리로도 가능하다 

<<<  scalar subquery 적용기준 >>>

1) .Select List Scalar Subquery를 수행할 결과집합이 대량이 아닌 경우 

2). 코드성 테이블의 조인이 많아 실행계획이 복잡해져 제어가 어려운 경우 

3). 코드성 테이블에서 명칭만 가져오는 경우 

---------------------------------------
- SQL : 사번 10007의 사원 정보를 알고자 함

select 성명, 주민번호, 자택전화번호, EMAIL,
               (              
                select 조직명              
                from 현조직_V b
                where b.조직코드 = a.현소속조직
               ) 부서,             
               (               
                select 명칭               
                from 직위_V c
               where c.코드 = a.현직위 
              ) 직위
from 사원 a 
where 사번 = '10007';
---------------------------------------

###  실습하기 ###

========================================================
http://www.oracleclub.com/lecture/1504
========================================================

다중 열 서브쿼리란 서브쿼리의 결과 값이 두 개 이상의 컬럼을 반환하는 서브쿼리 이다.


<< Pairwise(쌍비교) Subquery>>

서브쿼리가 한 번 실행되면서 모든 조건을 검색해서 주 쿼리로 넘겨 준다.

●예제 
 SELECT empno, sal, deptno
 FROM emp
 WHERE (sal, deptno) IN ( SELECT sal, deptno
                          FROM emp
                          WHERE deptno = 30
                              AND comm is NOT NULL );
                             

      EMPNO        SAL     DEPTNO
---------- ---------- ----------
      7499       1600         30
      7654       1250         30
      7521       1250         30
      7844       1500         30


<< Nonpairwise(비쌍비교) Subquery >>

서브쿼리가 여러 조건별로 사용 되어서 결과 값을 주 쿼리로 넘겨 준다.

●예제 
SELECT empno, sal, deptno
FROM emp
WHERE sal IN ( SELECT sal
                      FROM emp
                      WHERE deptno = 30
                          AND comm is NOT NULL )
        AND deptno  IN ( SELECT deptno
                                FROM emp
                                WHERE deptno = 30
                                     AND comm is NOT NULL );


     EMPNO        SAL     DEPTNO
---------- ---------- ----------
      7521       1250         30
      7654       1250         30
      7844       1500         30
      7499       1600         30



============================================
http://kaos119.egloos.com/2959681
============================================
오라클 인라인, 스칼라 서브쿼리 차이점

1. 스칼라 서브쿼리 ( 빨강색 ) 

select (select name from emp where emp_no = a.emp_no) name, 
         (select dept_name from dept where dept_no = a.dept_no) dept_name,
         salary
from salary


salary 테이블 안에 있는 내용이 모두 보여지고.. 이건 스칼라 쿼리를 이용한 것이고 

다음엔 인라인으로 바꿔서 사용해보자



2. 인라인 서브쿼리 (보라색)

select a.emp_name, b.dept_name, salary
from 
(
   select emp_no, emp_name
   from emp
) a,
(
   select dept_no, dept_name
   from dept
) b,
(
   select emp_no, dept_no, salary
   from salary
) c
where a.emp_no = c.emp_no
and b.dept_no = c.dept_no

이는  인라인이다 
차이점은 from 절 전이냐 후냐의 차이점 

스칼라 서브쿼리란 Select-List에서 서브쿼리가 사용될 때 이를 스칼라 서브쿼리라 칭함. 


=============================================================
http://wiki.oracleclub.com/pages/viewpage.action?pageId=4948083
=============================================================

I. 스칼라 서브쿼리

1. 스칼라 서브쿼리란?
스칼라 서브쿼리란 Select-List에서 서브쿼리가 사용될 때 이를 스칼라 서브쿼리라 칭함. 


1. 그룹함수 사용 안할 때는 리턴하는 값이 없음

SELECT  1
FROM   DEPT
WHERE  1 = 2
;

2. 그룹함수를 사용하면 값을 리턴함

SELECT MIN(DEPTNO)
FROM   DEPT
WHERE  1 = 2;


3. 스칼라 서브쿼리 테스트(일치하는 값이 없을 경우 NULL 리턴함)
-- EMP:DEPT = M:1 관계에서 M 대상을 올리다보니 GROUP BY 을 추가함

SELECT D.DEPTNO,
                           (SELECT MIN(EMPNO) 
                             FROM   EMP
                             WHERE  DEPTNO = D.DEPTNO)  EMPNO
FROM   DEPT D  
ORDER BY D.DEPTNO
;


    DEPTNO      EMPNO
---------- ----------
        10          1
        20         10
        30        100
        40       1000
        50      10000
        60     100000
        70           
        80           
        90 


2. 스칼라 서브쿼리와 Outer 조인 관계

위와 같이 스칼라 서브쿼리는 일치하지 않더라도 NULL를 리턴하므로 Outer 조인과 같은 형태이며,
이는 스칼라 서브쿼리와 Outer 조인은 서로 변형이 가능하다는 것을 알 수 있다


SELECT D.DEPTNO,
            E.EMPNO
FROM   DEPT D,
          (SELECT DEPTNO, 
                       MIN(EMPNO) EMPNO
            FROM   EMP
            GROUP BY DEPTNO) E
WHERE  D.DEPTNO = E.DEPTNO(+)
ORDER BY D.DEPTNO
;     

    DEPTNO      EMPNO   
---------- ----------   
        10          1   
        20         10   
        30        100   
        40       1000   
        50      10000   
        60     100000   
        70              
        80              
        90 



3. 성능상 Outer 조인을 스칼라 서브쿼리로 올려야 할 때 

만약 Outer 조인을 하는 집합이 인라인뷰이면서 그룹함수를 사용해서 View Merging이 안될 때 


1. 2개의 그룹함수 인라인뷰(from다음에)와 Outer 조인이 되어 View Merging이 안된다.


SELECT T_1.SUM_EMPNO SUM_EMPNO_1,
       T_2.SUM_EMPNO SUM_EMPNO_2,
       E.HIREDATE,
       E.DEPTNO
FROM   (SELECT E_1.EMPNO,
               SUM(E_1.EMPNO) SUM_EMPNO
        FROM   EMP E_1
        GROUP BY E_1.EMPNO) T_1,
       (SELECT E_2.EMPNO,
               SUM(E_2.EMPNO) SUM_EMPNO
        FROM   EMP E_2
        GROUP BY E_2.EMPNO) T_2, 
       EMP E
WHERE  E.EMPNO = T_1.EMPNO(+)
AND    E.EMPNO = T_2.EMPNO(+)
AND    E.DEPTNO = 10
;


SUM_EMPNO_1 SUM_EMPNO_2 HIREDATE     DEPTNO
----------- ----------- -------- ----------
       7782        7782 81/06/09         10
       7839        7839 81/11/17         10
       7934        7934 82/01/23         10





2. 이를 극복하기 위해 스칼라 서브쿼리로 올림


SELECT (SELECT SUM(E_1.EMPNO) SUM_EMPNO
        FROM   EMP E_1
        WHERE  E_1.EMPNO = E.EMPNO) SUM_EMPNO_1,
       (SELECT SUM(E_2.EMPNO) SUM_EMPNO
        FROM   EMP E_2
        WHERE  E_2.EMPNO = E.EMPNO) SUM_EMPNO_2,
       E.HIREDATE,
       E.DEPTNO
FROM   EMP E
WHERE  E.DEPTNO = 10
;


SUM_EMPNO_1 SUM_EMPNO_2 HIREDATE     DEPTNO
----------- ----------- -------- ----------
       7782        7782 81/06/09         10
       7839        7839 81/11/17         10
       7934        7934 82/01/23         10



4. 성능상 스칼라 서브쿼리를 Outer 조인으로 내려야 할 때 

만약 뷰 안에 스칼라 서브쿼리 컬럼이 존재하고 그 뷰 밖에서 서브쿼리 컬럼을 조건으로 사용할 경우.
이 때는 인덱스가 있다 하더라도 컬럼이 가공되어 있기 때문에 View Merging이 안되므로 이 때는 
스칼라 서브쿼리를 Outer Join으로 내려야 함 



1. 인라인뷰 안의 스칼라 서브쿼리를 뷰 밖에서 조건으로 사용할 경우

SELECT EMPNO,
       DEPT_NO
FROM   (SELECT E.EMPNO,
               (SELECT D.DEPTNO
                FROM   DEPT D
                WHERE  D.DEPTNO = E.DEPTNO) DEPT_NO
        FROM   EMP E)
WHERE  DEPT_NO = 10      
;



     EMPNO    DEPT_NO
---------- ----------
      7782         10
      7839         10
      7934         10


2. 스칼라 서브쿼리를 Outer 조인으로 내려서 극복


SELECT EMPNO,
       DEPT_NO
FROM   (SELECT E.EMPNO,
               D.DEPTNO DEPT_NO
        FROM   EMP  E,
               DEPT D
        WHERE  D.DEPTNO = E.DEPTNO(+))
WHERE  DEPT_NO = 10      
;



     EMPNO    DEPT_NO
---------- ----------
      7782         10
      7839         10
      7934         10



5. 스칼라 서브쿼리를 Outer 조인으로 내릴 때 IN절 처리 방법

만약 스칼라 서브쿼리에 IN절이 있을 경우 Outer 구문이 안먹히는데
이를 극복하기 위해서 DECODE() 구문을 사용하여 해결 가능


1. 스칼라 서브쿼리에 IN절이 있는 경우


SELECT EMPNO,
       DEPT_NO
FROM   (SELECT E.EMPNO,
               (SELECT D.DEPTNO
                FROM   DEPT D
                WHERE  D.DEPTNO = E.DEPTNO
                AND    D.DNAME IN ('SALES_1', 'SALES_2', 'SALES_3')) DEPT_NO
        FROM   EMP E)
WHERE  DEPT_NO = 10      
;



선택된 레코드가 없습니다.




2. 스칼라 서브쿼리의 IN절을 Outer 조인으로 내리지만 결국 구문 에러남

SELECT EMPNO,
       DEPT_NO
FROM   (SELECT E.EMPNO,
               D.DEPTNO DEPT_NO
        FROM   EMP  E,
               DEPT D
        WHERE  D.DEPTNO   = E.DEPTNO(+)
        AND    D.DNAME(+) IN ('SALES_1', 'SALES_2', 'SALES_3'))
WHERE  DEPT_NO = 10      
;

결과-----------------------------------------------------------------

        AND    D.DNAME(+) IN ('SALES_1', 'SALES_2', 'SALES_3'))
                          *
8행에 오류:
ORA-01719: 포괄 조인 운영 (+)는 OR 또는 IN의 연산수를 허용하지 않습니다
------------------------------------------------------------------------


3. DECODE 구문을 이용하여 해결


SELECT EMPNO,
       DEPT_NO
FROM   (SELECT E.EMPNO,
               D.DEPTNO DEPT_NO
        FROM   EMP  E,
               DEPT D
        WHERE  D.DEPTNO   = E.DEPTNO(+)
        --AND    D.DNAME(+) IN ('SALES_1', 'SALES_2', 'SALES_3')
        AND    DECODE(D.DNAME(+), 'SALES_1', 1,
                                  'SALES_2', 1,
                                  'SALES_3', 1) = 1)
WHERE  DEPT_NO = 10      
;




선택된 레코드가 없습니다.



II. 스칼라 서브쿼리의 캐싱 효과

1. 스칼라 서브쿼리는 입력값이 같을 경우 반복수행 안함

오라클은 스칼라 서브쿼리에 수행횟수를 최소화하려고 그 입력 값과 출력 값을 내부 캐시에 저장함. 
입력 값이 같을 경우 출력 출력 값도 같을 것으로 보고 캐싱된 출력 값을 보내주므로 입력 값의
NDV가 작으면 작을수록 펑션의 호출빈도를 많이 줄일 수 있다. 
사용방법은 펑션에 SELECT DUAL을 사용하면 된다. 

SELECT EMPNO,
       ENAME,
       HIREDATE,
       (SELECT GET_DNAME(DEPTNO) FROM DUAL) DNAME
FROM   EMP E
WHERE  HIREDATE :1 AND :2
;      
  
  


III. 두 개 이상의 값을 리턴하고 싶을 때


1. 결합연산자를 사용하는 방법

SELECT DEPTNO,
       DNAME,
       TO_NUMBER(SUBSTR(EMPNO, 1, 7))  AVG_EMPNO,
       TO_NUMBER(SUBSTR(EMPNO, 8, 15)) MIN_EMPNO,
       TO_NUMBER(SUBSTR(EMPNO, 15))    MAX_EMPNO
FROM   (SELECT D.DEPTNO,
               D.DNAME,
               (SELECT LPAD(AVG(EMPNO), 7) || LPAD(MIN(EMPNO), 7) || MAX(EMPNO)
                FROM   EMP
                WHERE  DEPTNO = D.DEPTNO) EMPNO
        FROM  DEPT D)
;



    DEPTNO DNAME           AVG_EMPNO  MIN_EMPNO  MAX_EMPNO
---------- -------------- ---------- ---------- ----------
        10 ACCOUNTING        7851.66   77827934       7934
        20 RESEARCH           7700.2   73697902       7902
        30 SALES                7686   74997900       7900
        40 OPERATIONS





2. 오브젝트 타입을 사용하는 경우



1. 오브젝트 타입 생성

CREATE OR REPLACE TYPE EMPNO_TYPE AS OBJECT
(AVG_EMPNO NUMBER, MIN_EMPNO NUMBER, MAX_EMPNO NUMBER);

유형이 생성되었습니다.
Type created.


2. 오브젝트 타입 활용하여 멀티 컬럼 리턴


SELECT DEPTNO,
       DNAME,
       A.EMPNO.AVG_EMPNO,
       A.EMPNO.MIN_EMPNO,
       A.EMPNO.MAX_EMPNO
FROM   (SELECT D.DEPTNO,
               D.DNAME,
               (SELECT EMPNO_TYPE(AVG(EMPNO), MIN(EMPNO), MAX(EMPNO))
                FROM   EMP
                WHERE  DEPTNO = D.DEPTNO) EMPNO
        FROM  DEPT D) A
;



   DEPTNO DNAME          EMPNO.AVG_EMPNO EMPNO.MIN_EMPNO EMPNO.MAX_EMPNO
--------- -------------- --------------- --------------- ---------------
       10 ACCOUNTING          7851.66667            7782            7934
       20 RESEARCH                7700.2            7369            7902
       30 SALES                     7686            7499            7900
       40 OPERATIONS

